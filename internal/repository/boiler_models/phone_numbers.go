// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler_models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PhoneNumber is an object representing the database table.
type PhoneNumber struct {
	ID        int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ContactID null.Int `boil:"contact_id" json:"contact_id,omitempty" toml:"contact_id" yaml:"contact_id,omitempty"`
	Type      string   `boil:"type" json:"type" toml:"type" yaml:"type"`
	Number    string   `boil:"number" json:"number" toml:"number" yaml:"number"`

	R *phoneNumberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L phoneNumberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PhoneNumberColumns = struct {
	ID        string
	ContactID string
	Type      string
	Number    string
}{
	ID:        "id",
	ContactID: "contact_id",
	Type:      "type",
	Number:    "number",
}

var PhoneNumberTableColumns = struct {
	ID        string
	ContactID string
	Type      string
	Number    string
}{
	ID:        "phone_numbers.id",
	ContactID: "phone_numbers.contact_id",
	Type:      "phone_numbers.type",
	Number:    "phone_numbers.number",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PhoneNumberWhere = struct {
	ID        whereHelperint
	ContactID whereHelpernull_Int
	Type      whereHelperstring
	Number    whereHelperstring
}{
	ID:        whereHelperint{field: "\"phone_numbers\".\"id\""},
	ContactID: whereHelpernull_Int{field: "\"phone_numbers\".\"contact_id\""},
	Type:      whereHelperstring{field: "\"phone_numbers\".\"type\""},
	Number:    whereHelperstring{field: "\"phone_numbers\".\"number\""},
}

// PhoneNumberRels is where relationship names are stored.
var PhoneNumberRels = struct {
	Contact string
}{
	Contact: "Contact",
}

// phoneNumberR is where relationships are stored.
type phoneNumberR struct {
	Contact *Contact `boil:"Contact" json:"Contact" toml:"Contact" yaml:"Contact"`
}

// NewStruct creates a new relationship struct
func (*phoneNumberR) NewStruct() *phoneNumberR {
	return &phoneNumberR{}
}

func (r *phoneNumberR) GetContact() *Contact {
	if r == nil {
		return nil
	}
	return r.Contact
}

// phoneNumberL is where Load methods for each relationship are stored.
type phoneNumberL struct{}

var (
	phoneNumberAllColumns            = []string{"id", "contact_id", "type", "number"}
	phoneNumberColumnsWithoutDefault = []string{"type", "number"}
	phoneNumberColumnsWithDefault    = []string{"id", "contact_id"}
	phoneNumberPrimaryKeyColumns     = []string{"id"}
	phoneNumberGeneratedColumns      = []string{}
)

type (
	// PhoneNumberSlice is an alias for a slice of pointers to PhoneNumber.
	// This should almost always be used instead of []PhoneNumber.
	PhoneNumberSlice []*PhoneNumber
	// PhoneNumberHook is the signature for custom PhoneNumber hook methods
	PhoneNumberHook func(context.Context, boil.ContextExecutor, *PhoneNumber) error

	phoneNumberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	phoneNumberType                 = reflect.TypeOf(&PhoneNumber{})
	phoneNumberMapping              = queries.MakeStructMapping(phoneNumberType)
	phoneNumberPrimaryKeyMapping, _ = queries.BindMapping(phoneNumberType, phoneNumberMapping, phoneNumberPrimaryKeyColumns)
	phoneNumberInsertCacheMut       sync.RWMutex
	phoneNumberInsertCache          = make(map[string]insertCache)
	phoneNumberUpdateCacheMut       sync.RWMutex
	phoneNumberUpdateCache          = make(map[string]updateCache)
	phoneNumberUpsertCacheMut       sync.RWMutex
	phoneNumberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var phoneNumberAfterSelectMu sync.Mutex
var phoneNumberAfterSelectHooks []PhoneNumberHook

var phoneNumberBeforeInsertMu sync.Mutex
var phoneNumberBeforeInsertHooks []PhoneNumberHook
var phoneNumberAfterInsertMu sync.Mutex
var phoneNumberAfterInsertHooks []PhoneNumberHook

var phoneNumberBeforeUpdateMu sync.Mutex
var phoneNumberBeforeUpdateHooks []PhoneNumberHook
var phoneNumberAfterUpdateMu sync.Mutex
var phoneNumberAfterUpdateHooks []PhoneNumberHook

var phoneNumberBeforeDeleteMu sync.Mutex
var phoneNumberBeforeDeleteHooks []PhoneNumberHook
var phoneNumberAfterDeleteMu sync.Mutex
var phoneNumberAfterDeleteHooks []PhoneNumberHook

var phoneNumberBeforeUpsertMu sync.Mutex
var phoneNumberBeforeUpsertHooks []PhoneNumberHook
var phoneNumberAfterUpsertMu sync.Mutex
var phoneNumberAfterUpsertHooks []PhoneNumberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PhoneNumber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PhoneNumber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PhoneNumber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PhoneNumber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PhoneNumber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PhoneNumber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PhoneNumber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PhoneNumber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PhoneNumber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneNumberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPhoneNumberHook registers your hook function for all future operations.
func AddPhoneNumberHook(hookPoint boil.HookPoint, phoneNumberHook PhoneNumberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		phoneNumberAfterSelectMu.Lock()
		phoneNumberAfterSelectHooks = append(phoneNumberAfterSelectHooks, phoneNumberHook)
		phoneNumberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		phoneNumberBeforeInsertMu.Lock()
		phoneNumberBeforeInsertHooks = append(phoneNumberBeforeInsertHooks, phoneNumberHook)
		phoneNumberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		phoneNumberAfterInsertMu.Lock()
		phoneNumberAfterInsertHooks = append(phoneNumberAfterInsertHooks, phoneNumberHook)
		phoneNumberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		phoneNumberBeforeUpdateMu.Lock()
		phoneNumberBeforeUpdateHooks = append(phoneNumberBeforeUpdateHooks, phoneNumberHook)
		phoneNumberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		phoneNumberAfterUpdateMu.Lock()
		phoneNumberAfterUpdateHooks = append(phoneNumberAfterUpdateHooks, phoneNumberHook)
		phoneNumberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		phoneNumberBeforeDeleteMu.Lock()
		phoneNumberBeforeDeleteHooks = append(phoneNumberBeforeDeleteHooks, phoneNumberHook)
		phoneNumberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		phoneNumberAfterDeleteMu.Lock()
		phoneNumberAfterDeleteHooks = append(phoneNumberAfterDeleteHooks, phoneNumberHook)
		phoneNumberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		phoneNumberBeforeUpsertMu.Lock()
		phoneNumberBeforeUpsertHooks = append(phoneNumberBeforeUpsertHooks, phoneNumberHook)
		phoneNumberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		phoneNumberAfterUpsertMu.Lock()
		phoneNumberAfterUpsertHooks = append(phoneNumberAfterUpsertHooks, phoneNumberHook)
		phoneNumberAfterUpsertMu.Unlock()
	}
}

// OneG returns a single phoneNumber record from the query using the global executor.
func (q phoneNumberQuery) OneG(ctx context.Context) (*PhoneNumber, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single phoneNumber record from the query.
func (q phoneNumberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PhoneNumber, error) {
	o := &PhoneNumber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler_models: failed to execute a one query for phone_numbers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PhoneNumber records from the query using the global executor.
func (q phoneNumberQuery) AllG(ctx context.Context) (PhoneNumberSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PhoneNumber records from the query.
func (q phoneNumberQuery) All(ctx context.Context, exec boil.ContextExecutor) (PhoneNumberSlice, error) {
	var o []*PhoneNumber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler_models: failed to assign all query results to PhoneNumber slice")
	}

	if len(phoneNumberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PhoneNumber records in the query using the global executor
func (q phoneNumberQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PhoneNumber records in the query.
func (q phoneNumberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to count phone_numbers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q phoneNumberQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q phoneNumberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler_models: failed to check if phone_numbers exists")
	}

	return count > 0, nil
}

// Contact pointed to by the foreign key.
func (o *PhoneNumber) Contact(mods ...qm.QueryMod) contactQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContactID),
	}

	queryMods = append(queryMods, mods...)

	return Contacts(queryMods...)
}

// LoadContact allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (phoneNumberL) LoadContact(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhoneNumber interface{}, mods queries.Applicator) error {
	var slice []*PhoneNumber
	var object *PhoneNumber

	if singular {
		var ok bool
		object, ok = maybePhoneNumber.(*PhoneNumber)
		if !ok {
			object = new(PhoneNumber)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhoneNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhoneNumber))
			}
		}
	} else {
		s, ok := maybePhoneNumber.(*[]*PhoneNumber)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhoneNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhoneNumber))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &phoneNumberR{}
		}
		if !queries.IsNil(object.ContactID) {
			args[object.ContactID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &phoneNumberR{}
			}

			if !queries.IsNil(obj.ContactID) {
				args[obj.ContactID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`contacts`),
		qm.WhereIn(`contacts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Contact")
	}

	var resultSlice []*Contact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Contact")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contacts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contacts")
	}

	if len(contactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Contact = foreign
		if foreign.R == nil {
			foreign.R = &contactR{}
		}
		foreign.R.PhoneNumbers = append(foreign.R.PhoneNumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ContactID, foreign.ID) {
				local.R.Contact = foreign
				if foreign.R == nil {
					foreign.R = &contactR{}
				}
				foreign.R.PhoneNumbers = append(foreign.R.PhoneNumbers, local)
				break
			}
		}
	}

	return nil
}

// SetContactG of the phoneNumber to the related item.
// Sets o.R.Contact to related.
// Adds o to related.R.PhoneNumbers.
// Uses the global database handle.
func (o *PhoneNumber) SetContactG(ctx context.Context, insert bool, related *Contact) error {
	return o.SetContact(ctx, boil.GetContextDB(), insert, related)
}

// SetContact of the phoneNumber to the related item.
// Sets o.R.Contact to related.
// Adds o to related.R.PhoneNumbers.
func (o *PhoneNumber) SetContact(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Contact) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"phone_numbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"contact_id"}),
		strmangle.WhereClause("\"", "\"", 2, phoneNumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ContactID, related.ID)
	if o.R == nil {
		o.R = &phoneNumberR{
			Contact: related,
		}
	} else {
		o.R.Contact = related
	}

	if related.R == nil {
		related.R = &contactR{
			PhoneNumbers: PhoneNumberSlice{o},
		}
	} else {
		related.R.PhoneNumbers = append(related.R.PhoneNumbers, o)
	}

	return nil
}

// RemoveContactG relationship.
// Sets o.R.Contact to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *PhoneNumber) RemoveContactG(ctx context.Context, related *Contact) error {
	return o.RemoveContact(ctx, boil.GetContextDB(), related)
}

// RemoveContact relationship.
// Sets o.R.Contact to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PhoneNumber) RemoveContact(ctx context.Context, exec boil.ContextExecutor, related *Contact) error {
	var err error

	queries.SetScanner(&o.ContactID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("contact_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Contact = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PhoneNumbers {
		if queries.Equal(o.ContactID, ri.ContactID) {
			continue
		}

		ln := len(related.R.PhoneNumbers)
		if ln > 1 && i < ln-1 {
			related.R.PhoneNumbers[i] = related.R.PhoneNumbers[ln-1]
		}
		related.R.PhoneNumbers = related.R.PhoneNumbers[:ln-1]
		break
	}
	return nil
}

// PhoneNumbers retrieves all the records using an executor.
func PhoneNumbers(mods ...qm.QueryMod) phoneNumberQuery {
	mods = append(mods, qm.From("\"phone_numbers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"phone_numbers\".*"})
	}

	return phoneNumberQuery{q}
}

// FindPhoneNumberG retrieves a single record by ID.
func FindPhoneNumberG(ctx context.Context, iD int, selectCols ...string) (*PhoneNumber, error) {
	return FindPhoneNumber(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPhoneNumber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPhoneNumber(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PhoneNumber, error) {
	phoneNumberObj := &PhoneNumber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"phone_numbers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, phoneNumberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler_models: unable to select from phone_numbers")
	}

	if err = phoneNumberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return phoneNumberObj, err
	}

	return phoneNumberObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PhoneNumber) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PhoneNumber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler_models: no phone_numbers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(phoneNumberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	phoneNumberInsertCacheMut.RLock()
	cache, cached := phoneNumberInsertCache[key]
	phoneNumberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			phoneNumberAllColumns,
			phoneNumberColumnsWithDefault,
			phoneNumberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(phoneNumberType, phoneNumberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(phoneNumberType, phoneNumberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"phone_numbers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"phone_numbers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler_models: unable to insert into phone_numbers")
	}

	if !cached {
		phoneNumberInsertCacheMut.Lock()
		phoneNumberInsertCache[key] = cache
		phoneNumberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PhoneNumber record using the global executor.
// See Update for more documentation.
func (o *PhoneNumber) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PhoneNumber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PhoneNumber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	phoneNumberUpdateCacheMut.RLock()
	cache, cached := phoneNumberUpdateCache[key]
	phoneNumberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			phoneNumberAllColumns,
			phoneNumberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler_models: unable to update phone_numbers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"phone_numbers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, phoneNumberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(phoneNumberType, phoneNumberMapping, append(wl, phoneNumberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to update phone_numbers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by update for phone_numbers")
	}

	if !cached {
		phoneNumberUpdateCacheMut.Lock()
		phoneNumberUpdateCache[key] = cache
		phoneNumberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q phoneNumberQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q phoneNumberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to update all for phone_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to retrieve rows affected for phone_numbers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PhoneNumberSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PhoneNumberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler_models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), phoneNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"phone_numbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, phoneNumberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to update all in phoneNumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to retrieve rows affected all in update all phoneNumber")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PhoneNumber) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PhoneNumber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("boiler_models: no phone_numbers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(phoneNumberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	phoneNumberUpsertCacheMut.RLock()
	cache, cached := phoneNumberUpsertCache[key]
	phoneNumberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			phoneNumberAllColumns,
			phoneNumberColumnsWithDefault,
			phoneNumberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			phoneNumberAllColumns,
			phoneNumberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler_models: unable to upsert phone_numbers, could not build update column list")
		}

		ret := strmangle.SetComplement(phoneNumberAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(phoneNumberPrimaryKeyColumns) == 0 {
				return errors.New("boiler_models: unable to upsert phone_numbers, could not build conflict column list")
			}

			conflict = make([]string, len(phoneNumberPrimaryKeyColumns))
			copy(conflict, phoneNumberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"phone_numbers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(phoneNumberType, phoneNumberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(phoneNumberType, phoneNumberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler_models: unable to upsert phone_numbers")
	}

	if !cached {
		phoneNumberUpsertCacheMut.Lock()
		phoneNumberUpsertCache[key] = cache
		phoneNumberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PhoneNumber record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PhoneNumber) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PhoneNumber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PhoneNumber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler_models: no PhoneNumber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), phoneNumberPrimaryKeyMapping)
	sql := "DELETE FROM \"phone_numbers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to delete from phone_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by delete for phone_numbers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q phoneNumberQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q phoneNumberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler_models: no phoneNumberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to delete all from phone_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by deleteall for phone_numbers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PhoneNumberSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PhoneNumberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(phoneNumberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), phoneNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"phone_numbers\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, phoneNumberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to delete all from phoneNumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by deleteall for phone_numbers")
	}

	if len(phoneNumberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PhoneNumber) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler_models: no PhoneNumber provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PhoneNumber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPhoneNumber(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhoneNumberSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler_models: empty PhoneNumberSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhoneNumberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PhoneNumberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), phoneNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"phone_numbers\".* FROM \"phone_numbers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, phoneNumberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler_models: unable to reload all in PhoneNumberSlice")
	}

	*o = slice

	return nil
}

// PhoneNumberExistsG checks if the PhoneNumber row exists.
func PhoneNumberExistsG(ctx context.Context, iD int) (bool, error) {
	return PhoneNumberExists(ctx, boil.GetContextDB(), iD)
}

// PhoneNumberExists checks if the PhoneNumber row exists.
func PhoneNumberExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"phone_numbers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler_models: unable to check if phone_numbers exists")
	}

	return exists, nil
}

// Exists checks if the PhoneNumber row exists.
func (o *PhoneNumber) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PhoneNumberExists(ctx, exec, o.ID)
}
