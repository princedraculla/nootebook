// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler_models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Contact is an object representing the database table.
type Contact struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *contactR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contactL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContactColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var ContactTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "contacts.id",
	Name: "contacts.name",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ContactWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"contacts\".\"id\""},
	Name: whereHelperstring{field: "\"contacts\".\"name\""},
}

// ContactRels is where relationship names are stored.
var ContactRels = struct {
	PhoneNumbers string
}{
	PhoneNumbers: "PhoneNumbers",
}

// contactR is where relationships are stored.
type contactR struct {
	PhoneNumbers PhoneNumberSlice `boil:"PhoneNumbers" json:"PhoneNumbers" toml:"PhoneNumbers" yaml:"PhoneNumbers"`
}

// NewStruct creates a new relationship struct
func (*contactR) NewStruct() *contactR {
	return &contactR{}
}

func (r *contactR) GetPhoneNumbers() PhoneNumberSlice {
	if r == nil {
		return nil
	}
	return r.PhoneNumbers
}

// contactL is where Load methods for each relationship are stored.
type contactL struct{}

var (
	contactAllColumns            = []string{"id", "name"}
	contactColumnsWithoutDefault = []string{"name"}
	contactColumnsWithDefault    = []string{"id"}
	contactPrimaryKeyColumns     = []string{"id"}
	contactGeneratedColumns      = []string{}
)

type (
	// ContactSlice is an alias for a slice of pointers to Contact.
	// This should almost always be used instead of []Contact.
	ContactSlice []*Contact
	// ContactHook is the signature for custom Contact hook methods
	ContactHook func(context.Context, boil.ContextExecutor, *Contact) error

	contactQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contactType                 = reflect.TypeOf(&Contact{})
	contactMapping              = queries.MakeStructMapping(contactType)
	contactPrimaryKeyMapping, _ = queries.BindMapping(contactType, contactMapping, contactPrimaryKeyColumns)
	contactInsertCacheMut       sync.RWMutex
	contactInsertCache          = make(map[string]insertCache)
	contactUpdateCacheMut       sync.RWMutex
	contactUpdateCache          = make(map[string]updateCache)
	contactUpsertCacheMut       sync.RWMutex
	contactUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contactAfterSelectMu sync.Mutex
var contactAfterSelectHooks []ContactHook

var contactBeforeInsertMu sync.Mutex
var contactBeforeInsertHooks []ContactHook
var contactAfterInsertMu sync.Mutex
var contactAfterInsertHooks []ContactHook

var contactBeforeUpdateMu sync.Mutex
var contactBeforeUpdateHooks []ContactHook
var contactAfterUpdateMu sync.Mutex
var contactAfterUpdateHooks []ContactHook

var contactBeforeDeleteMu sync.Mutex
var contactBeforeDeleteHooks []ContactHook
var contactAfterDeleteMu sync.Mutex
var contactAfterDeleteHooks []ContactHook

var contactBeforeUpsertMu sync.Mutex
var contactBeforeUpsertHooks []ContactHook
var contactAfterUpsertMu sync.Mutex
var contactAfterUpsertHooks []ContactHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Contact) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Contact) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Contact) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Contact) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Contact) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Contact) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Contact) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Contact) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Contact) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContactHook registers your hook function for all future operations.
func AddContactHook(hookPoint boil.HookPoint, contactHook ContactHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contactAfterSelectMu.Lock()
		contactAfterSelectHooks = append(contactAfterSelectHooks, contactHook)
		contactAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contactBeforeInsertMu.Lock()
		contactBeforeInsertHooks = append(contactBeforeInsertHooks, contactHook)
		contactBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contactAfterInsertMu.Lock()
		contactAfterInsertHooks = append(contactAfterInsertHooks, contactHook)
		contactAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contactBeforeUpdateMu.Lock()
		contactBeforeUpdateHooks = append(contactBeforeUpdateHooks, contactHook)
		contactBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contactAfterUpdateMu.Lock()
		contactAfterUpdateHooks = append(contactAfterUpdateHooks, contactHook)
		contactAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contactBeforeDeleteMu.Lock()
		contactBeforeDeleteHooks = append(contactBeforeDeleteHooks, contactHook)
		contactBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contactAfterDeleteMu.Lock()
		contactAfterDeleteHooks = append(contactAfterDeleteHooks, contactHook)
		contactAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contactBeforeUpsertMu.Lock()
		contactBeforeUpsertHooks = append(contactBeforeUpsertHooks, contactHook)
		contactBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contactAfterUpsertMu.Lock()
		contactAfterUpsertHooks = append(contactAfterUpsertHooks, contactHook)
		contactAfterUpsertMu.Unlock()
	}
}

// OneG returns a single contact record from the query using the global executor.
func (q contactQuery) OneG(ctx context.Context) (*Contact, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single contact record from the query.
func (q contactQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Contact, error) {
	o := &Contact{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler_models: failed to execute a one query for contacts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Contact records from the query using the global executor.
func (q contactQuery) AllG(ctx context.Context) (ContactSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Contact records from the query.
func (q contactQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContactSlice, error) {
	var o []*Contact

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler_models: failed to assign all query results to Contact slice")
	}

	if len(contactAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Contact records in the query using the global executor
func (q contactQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Contact records in the query.
func (q contactQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to count contacts rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q contactQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q contactQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler_models: failed to check if contacts exists")
	}

	return count > 0, nil
}

// PhoneNumbers retrieves all the phone_number's PhoneNumbers with an executor.
func (o *Contact) PhoneNumbers(mods ...qm.QueryMod) phoneNumberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"phone_numbers\".\"contact_id\"=?", o.ID),
	)

	return PhoneNumbers(queryMods...)
}

// LoadPhoneNumbers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contactL) LoadPhoneNumbers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContact interface{}, mods queries.Applicator) error {
	var slice []*Contact
	var object *Contact

	if singular {
		var ok bool
		object, ok = maybeContact.(*Contact)
		if !ok {
			object = new(Contact)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContact)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContact))
			}
		}
	} else {
		s, ok := maybeContact.(*[]*Contact)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContact)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContact))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contactR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contactR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`phone_numbers`),
		qm.WhereIn(`phone_numbers.contact_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load phone_numbers")
	}

	var resultSlice []*PhoneNumber
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice phone_numbers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on phone_numbers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for phone_numbers")
	}

	if len(phoneNumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PhoneNumbers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &phoneNumberR{}
			}
			foreign.R.Contact = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ContactID) {
				local.R.PhoneNumbers = append(local.R.PhoneNumbers, foreign)
				if foreign.R == nil {
					foreign.R = &phoneNumberR{}
				}
				foreign.R.Contact = local
				break
			}
		}
	}

	return nil
}

// AddPhoneNumbersG adds the given related objects to the existing relationships
// of the contact, optionally inserting them as new records.
// Appends related to o.R.PhoneNumbers.
// Sets related.R.Contact appropriately.
// Uses the global database handle.
func (o *Contact) AddPhoneNumbersG(ctx context.Context, insert bool, related ...*PhoneNumber) error {
	return o.AddPhoneNumbers(ctx, boil.GetContextDB(), insert, related...)
}

// AddPhoneNumbers adds the given related objects to the existing relationships
// of the contact, optionally inserting them as new records.
// Appends related to o.R.PhoneNumbers.
// Sets related.R.Contact appropriately.
func (o *Contact) AddPhoneNumbers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PhoneNumber) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ContactID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"phone_numbers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"contact_id"}),
				strmangle.WhereClause("\"", "\"", 2, phoneNumberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ContactID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &contactR{
			PhoneNumbers: related,
		}
	} else {
		o.R.PhoneNumbers = append(o.R.PhoneNumbers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &phoneNumberR{
				Contact: o,
			}
		} else {
			rel.R.Contact = o
		}
	}
	return nil
}

// SetPhoneNumbersG removes all previously related items of the
// contact replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Contact's PhoneNumbers accordingly.
// Replaces o.R.PhoneNumbers with related.
// Sets related.R.Contact's PhoneNumbers accordingly.
// Uses the global database handle.
func (o *Contact) SetPhoneNumbersG(ctx context.Context, insert bool, related ...*PhoneNumber) error {
	return o.SetPhoneNumbers(ctx, boil.GetContextDB(), insert, related...)
}

// SetPhoneNumbers removes all previously related items of the
// contact replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Contact's PhoneNumbers accordingly.
// Replaces o.R.PhoneNumbers with related.
// Sets related.R.Contact's PhoneNumbers accordingly.
func (o *Contact) SetPhoneNumbers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PhoneNumber) error {
	query := "update \"phone_numbers\" set \"contact_id\" = null where \"contact_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PhoneNumbers {
			queries.SetScanner(&rel.ContactID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Contact = nil
		}
		o.R.PhoneNumbers = nil
	}

	return o.AddPhoneNumbers(ctx, exec, insert, related...)
}

// RemovePhoneNumbersG relationships from objects passed in.
// Removes related items from R.PhoneNumbers (uses pointer comparison, removal does not keep order)
// Sets related.R.Contact.
// Uses the global database handle.
func (o *Contact) RemovePhoneNumbersG(ctx context.Context, related ...*PhoneNumber) error {
	return o.RemovePhoneNumbers(ctx, boil.GetContextDB(), related...)
}

// RemovePhoneNumbers relationships from objects passed in.
// Removes related items from R.PhoneNumbers (uses pointer comparison, removal does not keep order)
// Sets related.R.Contact.
func (o *Contact) RemovePhoneNumbers(ctx context.Context, exec boil.ContextExecutor, related ...*PhoneNumber) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ContactID, nil)
		if rel.R != nil {
			rel.R.Contact = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("contact_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PhoneNumbers {
			if rel != ri {
				continue
			}

			ln := len(o.R.PhoneNumbers)
			if ln > 1 && i < ln-1 {
				o.R.PhoneNumbers[i] = o.R.PhoneNumbers[ln-1]
			}
			o.R.PhoneNumbers = o.R.PhoneNumbers[:ln-1]
			break
		}
	}

	return nil
}

// Contacts retrieves all the records using an executor.
func Contacts(mods ...qm.QueryMod) contactQuery {
	mods = append(mods, qm.From("\"contacts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"contacts\".*"})
	}

	return contactQuery{q}
}

// FindContactG retrieves a single record by ID.
func FindContactG(ctx context.Context, iD int, selectCols ...string) (*Contact, error) {
	return FindContact(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindContact retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContact(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Contact, error) {
	contactObj := &Contact{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"contacts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contactObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler_models: unable to select from contacts")
	}

	if err = contactObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contactObj, err
	}

	return contactObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Contact) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Contact) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler_models: no contacts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contactColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contactInsertCacheMut.RLock()
	cache, cached := contactInsertCache[key]
	contactInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contactAllColumns,
			contactColumnsWithDefault,
			contactColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contactType, contactMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contactType, contactMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"contacts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"contacts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler_models: unable to insert into contacts")
	}

	if !cached {
		contactInsertCacheMut.Lock()
		contactInsertCache[key] = cache
		contactInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Contact record using the global executor.
// See Update for more documentation.
func (o *Contact) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Contact.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Contact) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contactUpdateCacheMut.RLock()
	cache, cached := contactUpdateCache[key]
	contactUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contactAllColumns,
			contactPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler_models: unable to update contacts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"contacts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contactPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contactType, contactMapping, append(wl, contactPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to update contacts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by update for contacts")
	}

	if !cached {
		contactUpdateCacheMut.Lock()
		contactUpdateCache[key] = cache
		contactUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q contactQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q contactQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to update all for contacts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to retrieve rows affected for contacts")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContactSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContactSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler_models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"contacts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contactPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to update all in contact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to retrieve rows affected all in update all contact")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Contact) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Contact) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("boiler_models: no contacts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contactColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contactUpsertCacheMut.RLock()
	cache, cached := contactUpsertCache[key]
	contactUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contactAllColumns,
			contactColumnsWithDefault,
			contactColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contactAllColumns,
			contactPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler_models: unable to upsert contacts, could not build update column list")
		}

		ret := strmangle.SetComplement(contactAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(contactPrimaryKeyColumns) == 0 {
				return errors.New("boiler_models: unable to upsert contacts, could not build conflict column list")
			}

			conflict = make([]string, len(contactPrimaryKeyColumns))
			copy(conflict, contactPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"contacts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(contactType, contactMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contactType, contactMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler_models: unable to upsert contacts")
	}

	if !cached {
		contactUpsertCacheMut.Lock()
		contactUpsertCache[key] = cache
		contactUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Contact record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Contact) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Contact record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Contact) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler_models: no Contact provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contactPrimaryKeyMapping)
	sql := "DELETE FROM \"contacts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to delete from contacts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by delete for contacts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q contactQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q contactQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler_models: no contactQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to delete all from contacts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by deleteall for contacts")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ContactSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContactSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contactBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"contacts\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, contactPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: unable to delete all from contact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler_models: failed to get rows affected by deleteall for contacts")
	}

	if len(contactAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Contact) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler_models: no Contact provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Contact) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContact(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContactSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler_models: empty ContactSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContactSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContactSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"contacts\".* FROM \"contacts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contactPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler_models: unable to reload all in ContactSlice")
	}

	*o = slice

	return nil
}

// ContactExistsG checks if the Contact row exists.
func ContactExistsG(ctx context.Context, iD int) (bool, error) {
	return ContactExists(ctx, boil.GetContextDB(), iD)
}

// ContactExists checks if the Contact row exists.
func ContactExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"contacts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler_models: unable to check if contacts exists")
	}

	return exists, nil
}

// Exists checks if the Contact row exists.
func (o *Contact) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContactExists(ctx, exec, o.ID)
}
