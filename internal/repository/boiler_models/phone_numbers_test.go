// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler_models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPhoneNumbers(t *testing.T) {
	t.Parallel()

	query := PhoneNumbers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPhoneNumbersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPhoneNumbersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PhoneNumbers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPhoneNumbersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PhoneNumberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPhoneNumbersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PhoneNumberExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PhoneNumber exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PhoneNumberExists to return true, but got false.")
	}
}

func testPhoneNumbersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	phoneNumberFound, err := FindPhoneNumber(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if phoneNumberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPhoneNumbersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PhoneNumbers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPhoneNumbersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PhoneNumbers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPhoneNumbersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	phoneNumberOne := &PhoneNumber{}
	phoneNumberTwo := &PhoneNumber{}
	if err = randomize.Struct(seed, phoneNumberOne, phoneNumberDBTypes, false, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}
	if err = randomize.Struct(seed, phoneNumberTwo, phoneNumberDBTypes, false, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = phoneNumberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = phoneNumberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PhoneNumbers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPhoneNumbersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	phoneNumberOne := &PhoneNumber{}
	phoneNumberTwo := &PhoneNumber{}
	if err = randomize.Struct(seed, phoneNumberOne, phoneNumberDBTypes, false, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}
	if err = randomize.Struct(seed, phoneNumberTwo, phoneNumberDBTypes, false, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = phoneNumberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = phoneNumberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func phoneNumberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func phoneNumberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PhoneNumber) error {
	*o = PhoneNumber{}
	return nil
}

func testPhoneNumbersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PhoneNumber{}
	o := &PhoneNumber{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PhoneNumber object: %s", err)
	}

	AddPhoneNumberHook(boil.BeforeInsertHook, phoneNumberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	phoneNumberBeforeInsertHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.AfterInsertHook, phoneNumberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	phoneNumberAfterInsertHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.AfterSelectHook, phoneNumberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	phoneNumberAfterSelectHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.BeforeUpdateHook, phoneNumberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	phoneNumberBeforeUpdateHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.AfterUpdateHook, phoneNumberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	phoneNumberAfterUpdateHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.BeforeDeleteHook, phoneNumberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	phoneNumberBeforeDeleteHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.AfterDeleteHook, phoneNumberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	phoneNumberAfterDeleteHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.BeforeUpsertHook, phoneNumberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	phoneNumberBeforeUpsertHooks = []PhoneNumberHook{}

	AddPhoneNumberHook(boil.AfterUpsertHook, phoneNumberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	phoneNumberAfterUpsertHooks = []PhoneNumberHook{}
}

func testPhoneNumbersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPhoneNumbersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(phoneNumberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPhoneNumberToOneContactUsingContact(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PhoneNumber
	var foreign Contact

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contactDBTypes, false, contactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contact struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ContactID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Contact().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddContactHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Contact) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PhoneNumberSlice{&local}
	if err = local.L.LoadContact(ctx, tx, false, (*[]*PhoneNumber)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Contact == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Contact = nil
	if err = local.L.LoadContact(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Contact == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPhoneNumberToOneSetOpContactUsingContact(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PhoneNumber
	var b, c Contact

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, phoneNumberDBTypes, false, strmangle.SetComplement(phoneNumberPrimaryKeyColumns, phoneNumberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contactDBTypes, false, strmangle.SetComplement(contactPrimaryKeyColumns, contactColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contactDBTypes, false, strmangle.SetComplement(contactPrimaryKeyColumns, contactColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Contact{&b, &c} {
		err = a.SetContact(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Contact != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PhoneNumbers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ContactID, x.ID) {
			t.Error("foreign key was wrong value", a.ContactID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ContactID))
		reflect.Indirect(reflect.ValueOf(&a.ContactID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ContactID, x.ID) {
			t.Error("foreign key was wrong value", a.ContactID, x.ID)
		}
	}
}

func testPhoneNumberToOneRemoveOpContactUsingContact(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PhoneNumber
	var b Contact

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, phoneNumberDBTypes, false, strmangle.SetComplement(phoneNumberPrimaryKeyColumns, phoneNumberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contactDBTypes, false, strmangle.SetComplement(contactPrimaryKeyColumns, contactColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetContact(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveContact(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Contact().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Contact != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ContactID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PhoneNumbers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPhoneNumbersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPhoneNumbersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PhoneNumberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPhoneNumbersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PhoneNumbers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	phoneNumberDBTypes = map[string]string{`ID`: `integer`, `ContactID`: `integer`, `Type`: `character varying`, `Number`: `character varying`}
	_                  = bytes.MinRead
)

func testPhoneNumbersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(phoneNumberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(phoneNumberAllColumns) == len(phoneNumberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPhoneNumbersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(phoneNumberAllColumns) == len(phoneNumberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PhoneNumber{}
	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, phoneNumberDBTypes, true, phoneNumberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(phoneNumberAllColumns, phoneNumberPrimaryKeyColumns) {
		fields = phoneNumberAllColumns
	} else {
		fields = strmangle.SetComplement(
			phoneNumberAllColumns,
			phoneNumberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PhoneNumberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPhoneNumbersUpsert(t *testing.T) {
	t.Parallel()

	if len(phoneNumberAllColumns) == len(phoneNumberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PhoneNumber{}
	if err = randomize.Struct(seed, &o, phoneNumberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PhoneNumber: %s", err)
	}

	count, err := PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, phoneNumberDBTypes, false, phoneNumberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PhoneNumber struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PhoneNumber: %s", err)
	}

	count, err = PhoneNumbers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
